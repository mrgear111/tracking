---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
---

<Layout title="Admin Dashboard - GITGOTPR">
  <Navbar />
  
  <main class="min-h-screen bg-black text-green-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="mb-8 flex justify-between items-start">
        <div>
          <h1 class="text-3xl font-bold text-green-400 font-mono mb-2">Admin Dashboard</h1>
          <p class="text-green-300 font-mono">Monitor user activity and PR statistics</p>
        </div>
        <button 
          id="refresh-all-btn" 
          class="bg-green-600 hover:bg-green-700 text-white font-mono px-6 py-3 rounded-lg transition duration-200 flex items-center gap-2"
        >
          <span id="refresh-icon">🔄</span>
          <span id="refresh-text">Refresh All PRs</span>
        </button>
      </div>

      <div id="loading" class="text-center py-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-400 mx-auto"></div>
        <p class="mt-4 text-green-300 font-mono">Loading dashboard data...</p>
      </div>

      <div id="refresh-status" class="hidden mb-6 border rounded-lg p-4"></div>

      <div id="error" class="hidden bg-red-900 border border-red-600 rounded-lg p-4 mb-6">
        <p class="text-red-100 font-mono">Error loading data. Please try again.</p>
      </div>

      <div id="dashboard-content" class="hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Total Users</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="total-users">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Total PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="total-prs">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Open PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="open-prs">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Merged PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="merged-prs">-</p>
          </div>
        </div>

        <div class="bg-gray-900 border border-green-600 rounded-lg overflow-hidden">
          <div class="px-6 py-4 border-b border-green-600">
            <h2 class="text-xl font-semibold text-green-400 font-mono">Registered Users</h2>
            <p class="text-green-300 font-mono text-sm mt-1">Complete user profiles and activity</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full">
              <thead class="bg-gray-800">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300">User</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300">Username</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300 hidden sm:table-cell">Full Name</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300 hidden sm:table-cell">Role</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300 hidden md:table-cell">College</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300 hidden lg:table-cell">Year</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300 hidden lg:table-cell">Instructor</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300">PR Count</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-green-300">Actions</th>
                </tr>
              </thead>
              <tbody id="users-table-body" class="bg-gray-900">
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <div id="pr-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div class="bg-gray-900 border border-green-600 rounded-lg max-w-4xl w-full max-h-96 overflow-y-auto">
        <div class="px-6 py-4 border-b border-green-600 flex justify-between items-center">
          <h3 class="text-xl font-semibold text-green-400 font-mono" id="modal-title">User PRs</h3>
          <button id="close-modal" class="text-green-300 hover:text-green-100 text-xl">&times;</button>
        </div>
        <div class="p-6" id="modal-content"></div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const API_BASE = import.meta.env.PUBLIC_API_BASE_URL || 'https://tracking-production-0c48.up.railway.app';
  let adminPassword = localStorage.getItem('adminPassword') || '';

  // Check if admin is authenticated
  function checkAdminAuth() {
    if (!adminPassword) {
      const password = prompt('Enter admin password:');
      if (!password) {
        window.location.href = '/';
        return false;
      }
      adminPassword = password;
      localStorage.setItem('adminPassword', password);
    }
    return true;
  }

  async function loadDashboardData() {
    if (!checkAdminAuth()) return;
    
    try {
      // Load stats with admin password
      const statsResponse = await fetch(API_BASE + '/admin/stats?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (statsResponse.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Invalid admin password. Please try again.');
        window.location.reload();
        return;
      }
      
      const stats = await statsResponse.json();
      const totalUsersEl = document.getElementById('total-users');
      const totalPRsEl = document.getElementById('total-prs');
      const openPRsEl = document.getElementById('open-prs');
      const mergedPRsEl = document.getElementById('merged-prs');
      
      if (totalUsersEl) totalUsersEl.textContent = stats.totalUsers;
      if (totalPRsEl) totalPRsEl.textContent = stats.totalPRs;
      if (openPRsEl) openPRsEl.textContent = stats.openPRs;
      if (mergedPRsEl) mergedPRsEl.textContent = stats.mergedPRs;

      const usersResponse = await fetch(API_BASE + '/admin/users?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (usersResponse.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Session expired. Please login again.');
        window.location.reload();
        return;
      }
      
      const usersData = await usersResponse.json();
      const tableBody = document.getElementById('users-table-body');
      if (!tableBody) return;
      
      tableBody.innerHTML = '';

      usersData.users.forEach((user: any) => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-800 border-t border-green-700';
        
        // Build the row HTML with profile information
        const profileData = [
          // User avatar and display name
          '<td class="px-6 py-4"><div class="flex items-center"><img class="h-10 w-10 rounded-full" src="' + (user.avatar_url || '/default-avatar.png') + '" alt="' + user.username + '"><div class="ml-4 text-sm font-mono text-green-100">' + (user.display_name || user.username) + '</div></div></td>',
          // Username
          '<td class="px-6 py-4 text-sm text-green-300 font-mono">@' + user.username + '</td>',
          // Full Name (hidden on mobile)
          '<td class="px-6 py-4 text-sm text-green-100 font-mono hidden sm:table-cell">' + (user.full_name || '<span class="text-gray-500 italic">Not provided</span>') + '</td>',
          // Role (hidden on mobile)
          '<td class="px-6 py-4 text-sm font-mono hidden sm:table-cell">' + (user.role ? '<span class="' + (user.role === 'Student' ? 'text-blue-400' : 'text-purple-400') + '">' + user.role + '</span>' : '<span class="text-gray-500 italic">Not provided</span>') + '</td>',
          // College (hidden on small screens)
          '<td class="px-6 py-4 text-sm text-green-100 font-mono hidden md:table-cell">' + (user.college || '<span class="text-gray-500 italic">Not provided</span>') + '</td>',
          // Year (hidden on medium screens and below)
          '<td class="px-6 py-4 text-sm text-green-100 font-mono hidden lg:table-cell">' + (user.year || '<span class="text-gray-500 italic">N/A</span>') + '</td>',
          // Instructor (hidden on medium screens and below)
          '<td class="px-6 py-4 text-sm text-green-100 font-mono hidden lg:table-cell">' + (user.instructor || '<span class="text-gray-500 italic">Not provided</span>') + '</td>',
          // PR Count
          '<td class="px-6 py-4 text-sm text-green-100 font-mono">' + user.pr_count + '</td>',
          // Actions
          '<td class="px-6 py-4 text-sm"><button onclick="viewUserPRs(' + user.id + ', \'' + user.username + '\')" class="text-green-400 hover:text-green-300 font-mono">View PRs</button></td>'
        ];
        
        row.innerHTML = profileData.join('');
        tableBody.appendChild(row);
      });

      const loadingEl = document.getElementById('loading');
      const dashboardEl = document.getElementById('dashboard-content');
      if (loadingEl) loadingEl.classList.add('hidden');
      if (dashboardEl) dashboardEl.classList.remove('hidden');
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      const loadingEl = document.getElementById('loading');
      const errorEl = document.getElementById('error');
      if (loadingEl) loadingEl.classList.add('hidden');
      if (errorEl) errorEl.classList.remove('hidden');
    }
  }

  async function viewUserPRs(userId: number, username: string) {
    try {
      const adminPassword = localStorage.getItem('adminPassword');
      if (!adminPassword) return;
      
      const response = await fetch(API_BASE + '/admin/users/' + userId + '/prs?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (response.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Session expired. Please login again.');
        window.location.reload();
        return;
      }
      
      const data = await response.json();
      const modalTitle = document.getElementById('modal-title');
      const modalContent = document.getElementById('modal-content');
      if (!modalTitle || !modalContent) return;
      
      modalTitle.textContent = 'PRs by @' + username;
      
      if (data.prs.length === 0) {
        modalContent.innerHTML = '<p class="text-green-300 font-mono">No PRs found.</p>';
      } else {
        let html = '<div class="space-y-4">';
        data.prs.forEach((pr: any) => {
          const createdDate = new Date(pr.created_at).toLocaleDateString();
          const statusIcon = pr.state === 'open' ? '🟢' : '🟣';
          html += '<div class="border border-green-700 rounded-lg p-4"><div class="flex justify-between items-start mb-2"><h4 class="text-green-100 font-mono">' + statusIcon + ' ' + pr.title + '</h4><span class="text-green-400 text-sm font-mono">#' + pr.pr_number + '</span></div><p class="text-green-300 text-sm font-mono mb-2">' + pr.repository + '</p><p class="text-green-400 text-sm font-mono mb-2">Created: ' + createdDate + '</p><a href="' + pr.url + '" target="_blank" class="text-blue-400 hover:text-blue-300 text-sm font-mono">View on GitHub →</a></div>';
        });
        html += '</div>';
        modalContent.innerHTML = html;
      }
      const prModalEl = document.getElementById('pr-modal');
      if (prModalEl) prModalEl.classList.remove('hidden');
    } catch (error) {
      console.error('Error loading user PRs:', error);
    }
  }

  const closeModalBtn = document.getElementById('close-modal');
  const prModal = document.getElementById('pr-modal');
  
  if (closeModalBtn && prModal) {
    closeModalBtn.addEventListener('click', () => {
      prModal.classList.add('hidden');
    });

    prModal.addEventListener('click', (e) => {
      if ((e.target as HTMLElement).id === 'pr-modal') {
        prModal.classList.add('hidden');
      }
    });
  }

  // Manual refresh all PRs function
  async function refreshAllPRs() {
    const refreshBtn = document.getElementById('refresh-all-btn') as HTMLButtonElement | null;
    const refreshIcon = document.getElementById('refresh-icon');
    const refreshText = document.getElementById('refresh-text');
    const refreshStatus = document.getElementById('refresh-status');
    
    if (!refreshBtn || !refreshIcon || !refreshText || !refreshStatus) return;
    
    // Disable button and show loading state
    refreshBtn.disabled = true;
    refreshBtn.classList.add('opacity-50', 'cursor-not-allowed');
    refreshIcon.classList.add('animate-spin');
    refreshText.textContent = 'Refreshing...';
    
    // Show status message
    refreshStatus.className = 'mb-6 border border-blue-600 bg-blue-900 rounded-lg p-4';
    refreshStatus.textContent = '🔄 Fetching latest PR data for all users... This may take a minute.';
    refreshStatus.classList.remove('hidden');
    
    try {
      const adminPassword = localStorage.getItem('adminPassword');
      if (!adminPassword) return;
      
      const response = await fetch(API_BASE + '/admin/refresh-all?adminPassword=' + encodeURIComponent(adminPassword), {
        method: 'POST'
      });
      
      if (response.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Session expired. Please login again.');
        window.location.reload();
        return;
      }
      
      const data = await response.json();
      
      // Show success message
      refreshStatus.className = 'mb-6 border border-green-600 bg-green-900 rounded-lg p-4';
      refreshStatus.innerHTML = '<p class="text-green-100 font-mono">✅ Refresh completed successfully!</p><p class="text-green-300 font-mono text-sm mt-2">Refreshed: ' + data.usersRefreshed + ' users | Errors: ' + data.errors + '</p>';
      
      // Reload dashboard data
      setTimeout(() => {
        loadDashboardData();
      }, 2000);
      
      // Hide status after 5 seconds
      setTimeout(() => {
        refreshStatus.classList.add('hidden');
      }, 5000);
      
    } catch (error) {
      console.error('Error refreshing PRs:', error);
      refreshStatus.className = 'mb-6 border border-red-600 bg-red-900 rounded-lg p-4';
      refreshStatus.innerHTML = '<p class="text-red-100 font-mono">❌ Error refreshing PRs. Please try again.</p>';
    } finally {
      // Re-enable button
      refreshBtn.disabled = false;
      refreshBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      refreshIcon.classList.remove('animate-spin');
      refreshText.textContent = 'Refresh All PRs';
    }
  }

  // Add event listener to refresh button
  const refreshAllBtn = document.getElementById('refresh-all-btn');
  if (refreshAllBtn) {
    refreshAllBtn.addEventListener('click', refreshAllPRs);
  }

  loadDashboardData();
  (window as any).viewUserPRs = viewUserPRs;
</script>

---
---

<nav class="bg-black shadow-lg">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center">
        <div class="flex-shrink-0 flex items-center gap-3">
          <!-- Club Logo -->
          <img src="/logo.png" alt="NST-SDC Logo" class="h-10 w-10 rounded-lg">
          <!-- Branding -->
          <div>
            <h1 class="text-green-400 text-xl font-bold font-mono">GITGOPR</h1>
            <p class="text-green-300 text-xs font-mono">Managed by Dev club - NSTSDC</p>
          </div>
        </div>
      </div>
      
      <div class="hidden md:ml-6 md:flex md:items-center md:space-x-8">
        <a href="/" class="text-green-100 hover:text-green-300 px-3 py-2 rounded-md text-sm font-medium transition-colors font-mono">
          Home
        </a>
        
        <a href="/leaderboard" class="text-green-100 hover:text-green-300 px-3 py-2 rounded-md text-sm font-medium transition-colors font-mono">
          Leaderboard
        </a>
        
        <a id="register-link" href="/register" class="hidden text-yellow-400 hover:text-yellow-300 px-3 py-2 rounded-md text-sm font-medium transition-colors font-mono">
          ⚠️ Complete Profile
        </a>
        
        <a href="/login" class="text-green-100 hover:text-green-300 px-3 py-2 rounded-md text-sm font-medium transition-colors font-mono">
          Login
        </a>
        <div id="auth-area"></div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center">
        <button id="mobile-menu-button" type="button" class="text-green-100 hover:text-green-300 focus:outline-none focus:text-green-300">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-black border-t border-green-800">
      <a href="/" class="text-green-100 hover:text-green-300 block px-3 py-2 rounded-md text-base font-medium font-mono">
        Home
      </a>
      <a href="/leaderboard" class="text-green-100 hover:text-green-300 block px-3 py-2 rounded-md text-base font-medium font-mono">
        Leaderboard
      </a>
      <a id="register-link-mobile" href="/register" class="hidden text-yellow-400 hover:text-yellow-300 block px-3 py-2 rounded-md text-base font-medium font-mono">
        ⚠️ Complete Profile
      </a>
      <a href="/login" class="text-green-100 hover:text-green-300 block px-3 py-2 rounded-md text-base font-medium font-mono">
        Login
      </a>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    mobileMenuButton?.addEventListener('click', function() {
      mobileMenu?.classList.toggle('hidden');
    });
  });
</script>

<script>
  async function renderAuthArea() {
    const authArea = document.getElementById('auth-area');
    const loginLinks = document.querySelectorAll<HTMLElement>('a[href="/login"]');
    const registerLink = document.getElementById('register-link');
    const registerLinkMobile = document.getElementById('register-link-mobile');
    const API_BASE = import.meta.env.PUBLIC_API_BASE_URL || 'https://tracking-production-0c48.up.railway.app';
    
    if (!authArea) return;
    
    try {
      const res = await fetch(API_BASE + '/auth/me', { credentials: 'include' });
      if (res.ok) {
        const data = await res.json();
        if (data.authenticated && data.user) {
          // Hide login links
          loginLinks.forEach(link => link.style.display = 'none');
          
          // Check if user has completed profile (role and college required, year only for students)
          const hasProfile = data.user.full_name && data.user.role && data.user.college;
          
          if (!hasProfile) {
            // Show "Complete Profile" link if profile incomplete
            if (registerLink) registerLink.classList.remove('hidden');
            if (registerLinkMobile) registerLinkMobile.classList.remove('hidden');
          } else {
            // Hide register link if profile is complete
            if (registerLink) registerLink.classList.add('hidden');
            if (registerLinkMobile) registerLinkMobile.classList.add('hidden');
          }
          
          // Extract username from various possible fields
          const username = data.user.username || data.user.login || data.user.displayName || 'user';
          
          // Show user info and logout
          if (authArea) {
            authArea.innerHTML = `
              <span class="text-green-100 text-sm mr-3">@${username}</span>
              <a href="${API_BASE}/auth/logout" class="bg-red-600 hover:bg-red-500 text-white px-3 py-1 rounded-md text-sm">Sign out</a>
            `;
          }
        } else {
          // Show login links, hide register link
          loginLinks.forEach(link => link.style.display = '');
          if (registerLink) registerLink.classList.add('hidden');
          if (registerLinkMobile) registerLinkMobile.classList.add('hidden');
          if (authArea) authArea.innerHTML = '';
        }
      } else {
        // Show login links, hide register link
        loginLinks.forEach(link => link.style.display = '');
        if (registerLink) registerLink.classList.add('hidden');
        if (registerLinkMobile) registerLinkMobile.classList.add('hidden');
        if (authArea) authArea.innerHTML = '';
      }
    } catch (err) {
      console.warn('Auth fetch failed', err);
      // Show login links on error, hide register link
      loginLinks.forEach(link => link.style.display = '');
      if (registerLink) registerLink.classList.add('hidden');
      if (registerLinkMobile) registerLinkMobile.classList.add('hidden');
      if (authArea) authArea.innerHTML = '';
    }
  }

  renderAuthArea();
</script>
